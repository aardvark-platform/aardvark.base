using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Aardvark.Base
{
    // AUTOGENERATED CODE - DO NOT CHANGE!

    //# foreach (var isDouble in new[] { false, true }) {
    //#     var ftype = isDouble ? Meta.DoubleType : Meta.FloatType;
    //#     var ft = ftype.Name;
    //#     var at = isDouble ? "AliasTableD" : "AliasTableF";

    /// <summary>
    /// Walker 1974: https://en.wikipedia.org/wiki/Alias_method
    /// Algorithm to sample a discrete probability distribution function (PDF) in O(1).
    /// The PDF does not need to be normalized, but the normalization factor "1/Sum(pdf)" needs to be supplied.
    /// </summary>
    public class __at__
    {
        __ft__[] _probablity; // U[i]
        int[] _alias;         // K[i]

        public __ft__[] U => _probablity;
        public int[] K => _alias;

        /// <summary>
        /// Creates an alias table from a genral PDF that does not integrate to 1.
        /// The normalization factor will be calculated for the construction.
        /// </summary>
        public __at__ FromPdf(__ft__[] pdf, IRandomUniform rnd = null)
        {
            return new __at__(pdf, 1 / pdf.Sum(), rnd);
        }

        /// <summary>
        /// Creates an alias table from an already normalized PDF (integrates to 1).
        /// </summary>
        public __at__ FromNormalizedPdf(__ft__[] pdf, IRandomUniform rnd = null)
        {
            return new __at__(pdf, 1, rnd);
        }

        /// <summary>
        /// Create an alias table from a PDf and its normalization factor: 1.0 / Sum(pdf)
        /// </summary>
        public __at__(__ft__[] pdf, __ft__ pdfNorm, IRandomUniform rnd = null)
        {
            var n = pdf.Length;
            _probablity = new __ft__[n];
            _alias = new int[n];
            Update(pdf, pdfNorm, rnd);
        }

        /// <summary>
        /// Updates the alias table with the given PDF and its norm.
        /// The length of the PDF is expected to match the length of AliasTable.
        /// </summary>
        public void Update(__ft__[] pdf, __ft__ pdfNorm, IRandomUniform rnd = null)
        {
            if (pdf.Length != _alias.Length) throw new ArgumentException("The length of the PDF does not match the length of the AliasTable!");

            if (rnd == null) rnd = new RandomSystem();

            var n = pdf.Length;
            var overfull = new List<int>(n);
            var underfull = new List<int>(n);

            for (int i = 0; i < n; i++)
            {
                var ui = pdf[i] * pdfNorm * n;
                _probablity[i] = ui;
                if (ui > 1) overfull.Add(i);
                else if (ui < 1) underfull.Add(i);
            }

            while (overfull.Count > 0 && underfull.Count > 0)
            {
                var ii = rnd.UniformInt(overfull.Count);  // random overfull
                var jj = rnd.UniformInt(underfull.Count); // random underfull
                var ri = overfull[ii];
                var rj = underfull[jj];
                underfull[jj] = underfull[underfull.Count - 1];
                underfull.RemoveAt(underfull.Count - 1);
                // rj will become exactly full (with own probability + alias for remainder)
                _alias[rj] = ri; // K[j] = i
                var uri = _probablity[ri];
                var urj = _probablity[rj];
                var uinew = uri + urj - 1; // U[i] + U[j] - 1
                _probablity[ri] = uinew;
                if (uinew <= 1) // otherwise keep in overfull
                {
                    overfull[ii] = overfull[overfull.Count - 1];
                    overfull.RemoveAt(overfull.Count - 1);
                    if (uinew < 1)
                        underfull.Add(ri);
                }
            }

            while (underfull.Count > 0)
            {
                var i = underfull[underfull.Count - 1];
                _probablity[i] = 1;
                underfull.RemoveAt(underfull.Count - 1);
            }

            while (overfull.Count > 0)
            {
                var i = overfull[overfull.Count - 1];
                _probablity[i] = 1;
                overfull.RemoveAt(overfull.Count - 1);
            }
        }

        /// <summary>
        /// Sample pdf using the alias table with random variable x: [0, 1) in O(1).
        /// NOTE: About x2-4 faster than sampling a CDF with a binary search.
        /// </summary>
        public int Sample(__ft__ x1)
        {
            var nx = _probablity.Length * x1;
            var i = (int)nx;
            var y = nx - i;
            return y < _probablity[i] ? i : _alias[i];
        }
    }

    //# } // isDouble
}
